name: 'Build and Deploy to GKE'

on:
  push:
    branches:
      - 'main'

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT_ID }}
  GAR_LOCATION: 'us-central1' # Update if your Artifact Registry location is different
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER_NAME }}
  GKE_ZONE: ${{ secrets.GKE_CLUSTER_LOCATION }}
  DEPLOYMENT_NAME: 'saleor-deployment' # Update to your deployment name if different
  REPOSITORY: 'saleor-repo' # Update to your Artifact Registry docker repository name
  IMAGE: 'saleor-image'
  WORKLOAD_IDENTITY_PROVIDER: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider' # Update to your workload identity provider

jobs:
  setup-build-publish-deploy:
    name: 'Setup, Build, Publish, and Deploy'
    runs-on: 'ubuntu-latest'
    environment: 'production'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v3'
        with:
          submodules: true

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'

      - name: 'Docker Auth'
        uses: 'docker/login-action@v3'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.auth_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      - name: 'Set up GKE credentials'
        uses: 'google-github-actions/get-gke-credentials@v2'
        with:
          cluster_name: '${{ env.GKE_CLUSTER }}'
          location: '${{ env.GKE_ZONE }}'

      - name: 'Build and push Docker containers'
        run: |-
          # Define the Docker Compose file
          COMPOSE_FILE='docker-compose.yml'

          # Build Docker images defined in docker-compose.yml
          docker-compose -f $COMPOSE_FILE build

          # Tag and push each image
          for IMAGE_NAME in $(docker-compose -f $COMPOSE_FILE config | grep image | awk '{print $2}'); do
            TAG="${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE_NAME}:${GITHUB_SHA}"
            docker tag $IMAGE_NAME $TAG
            docker push $TAG
          done

      - name: 'Set up Kustomize'
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.4.3/kustomize_v5.4.3_linux_amd64.tar.gz
          tar xzf kustomize
          chmod u+x ./kustomize

      - name: 'Deploy to GKE'
        run: |-
          # Update kustomization.yaml or deployment.yaml with new image tags
          ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide

